#####################
#   load packages   #
#####################

using DataFrames, CSV, Dates, CategoricalArrays, Colors, ColorSchemes, PlotlyJS

#####################
#     get data      #
#####################

ppa_price = CSV.read("/Users/katiepress/Desktop/Rproj/Tidy Tuesday/ppa_price.csv", DataFrame);

############################
#   check the data types   #
############################

eltype.(eachcol(ppa_price))

########################################
#   check out first few rows of data   #
########################################

first(ppa_price, 6)

########################################
#     convert data from wide to long   #
########################################

ppa_price_long = stack(ppa_price, Not(1:2))

#############################
#   clean the column names  #
#############################

rename!(ppa_price_long, [:ppa_execution_date, :capacity_mw, :region, :ppa_price]);

##check column names
first(ppa_price_long)


#################################
#   Drop the NAs from price     #
#   result should be 333 rows   #
#################################

#First have to convert NAs to Julia's missing type
ppa_price_long.ppa_price = replace(ppa_price_long.ppa_price, "NA" => missing);

#Now subset and check the number of rows
subset!(ppa_price_long, :ppa_price => ByRow(!ismissing));
nrow(ppa_price_long)

#########################################
#    Convert Region to Categorical      #
#########################################

transform!(ppa_price_long, :region => categorical);

#check the levels
levels(ppa_price_long.region_categorical)

#############################################
#   Convert Price to Numeric (Julia Only)   #
#############################################

#julia has a weird combined type of missing + (whatever type)
eltype.(eachcol(ppa_price_long))

#first drop missings (which there aren't any)
dropmissing!(ppa_price_long, :ppa_price);

#convert to Numeric
transform!(ppa_price_long, :ppa_price => ByRow(x -> parse(Float64, x)) => :ppa_price);

#####################
#   Convert Dates   #
#####################

#Get the date portion of the string, chopping off time zone
transform!(ppa_price_long, :ppa_execution_date => ByRow(x -> SubString(x, 1, 10)) => :ppa_date);

#convert string to date 
myFormat = Dates.DateFormat("yyyy-mm-dd")
ppa_price_long.ppa_date = Date.(ppa_price_long.ppa_date, myFormat);

#create year variable
transform!(ppa_price_long, :ppa_date => ByRow(x -> Dates.year(x)) => :ppa_year);

################################################
##          Bubble Plot with Plotly         ##
################################################

#can use this to map the colors to correct regions, similar to Python
mycolorpal = Dict(
    "CAISO" => "#4E79A7", 
    "ERCOT" => "#F28E2B", 
    "Hawaii" => "#E15759", 
    "ISO-NE" => "#76B7B2",
    "MISO" => "#59A14F", 
    "NYISO" => "#BAB0AC", 
    "PJM" => "#9C755F", 
    "Southeast (non-ISO)" => "#FF9DA7",
    "SPP" => "#B07AA1", 
    "West (non-ISO)" => "#EDC948");

#create the scatterplot 
plot([scatter(
    subdf,
    x=:ppa_date,
    y=:ppa_price,
    color=:region_categorical,
    mode="markers",
    marker=attr(size=:capacity_mw, sizemode="area", symbol="circle-open"),
    marker_color = mycolorpal[subdf[1, :region_categorical]],
    marker_line_width = 2,
    name=subdf[1, :region_categorical],
    labels = Dict(
        :region_categorical => "Region",
        :ppa_date => "", 
        :ppa_price => "PPA Price (2020 Dollars/MWh)"),
)
for subdf in groupby(ppa_price_long, :region_categorical)
],
Layout(legend_orientation="h",
    legend_x=.9,
        legend_y=1.02,
        legend_xanchor="right",
        legend_yanchor="bottom"))
        
        
################################################
##          Stacked Bar with Plotly           ##
################################################

#aggregate the data for stacked bars
ppa_capacity = combine(groupby(ppa_price_long, [:region_categorical,:ppa_year]), :capacity_mw => sum);

#aggregate by year for bar annotations
ppa_capacity_year = sort(ppa_capacity, [:ppa_year, order(:region_categorical, rev=true)]);
ppa_capacity_year = combine(groupby(ppa_capacity_year, :ppa_year),
 :capacity_mw_sum => sum => :capacity_sum,
 :region_categorical => first => :region_categorical);
 transform!(ppa_capacity_year, :capacity_sum => ByRow(x -> round(Int32, x)) => :capacity_sum);

#create a new dataset (this is similar to method used in R)
ppa_capacity_all = leftjoin(ppa_capacity, ppa_capacity_year, on = [:ppa_year, :region_categorical]);

#Final bar Plot
plot([bar(
    subdf,
    x=:ppa_year,
    y=:capacity_mw_sum,
    color=:region_categorical,
    mode="markers",
    marker_color = mycolorpal[subdf[1, :region_categorical]],
    name=subdf[1, :region_categorical],
    text=:capacity_sum,
    textposition="outside",

)
for subdf in groupby(ppa_capacity_all, :region_categorical)
],
Layout(
        barmode="stack",
        yaxis_title="Capacity (MW-AC)",
        legend_title_text="Region",
        legend_orientation="h",
        legend_x=.9,
        legend_y=1.02,
        legend_xanchor="right",
        legend_yanchor="bottom",
        xaxis_tickvals=[
            2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
            2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]
        ))




